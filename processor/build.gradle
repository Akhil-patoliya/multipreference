buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}


apply plugin: 'kotlin'

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.novoda.bintray-release'

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

sourceSets {
    main.java.srcDirs += project(":library").file("src/main/java")
    test.java.srcDirs += project(":library").file("src/test/java")
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.funktionale:funktionale-either:$funktionaleVersion"

    implementation "com.android.support:support-annotations:$supportLibraryVersion"

    implementation "com.squareup:javapoet:$javapoetVersion"
    implementation "com.google.guava:guava:$guavaVersion"

    implementation "com.google.android:android:$androidVersion"

    testImplementation "org.jetbrains.spek:spek-api:$spekVersion"
    testImplementation "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"

    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
}

publish {
    def versionFile = new File(rootDir, 'VERSION')

    userOrg = artifactConfig.user
    groupId = artifactConfig.groupId
    artifactId = artifactConfig.processorArtifactId

    version = (versionFile.exists() ? versionFile.text : releaseVersionCandidate).trim()
    
    desc = artifactConfig.description
    website = artifactConfig.websiteUrl
    licences = artifactConfig.licenses
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}